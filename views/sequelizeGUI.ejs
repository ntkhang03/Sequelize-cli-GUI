<!DOCTYPE html>
<html>

<head>
  <title>Sequelize GUI</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
  <style>
    /* Tùy chỉnh giao diện tại đây */
    body {
      background-color: #f8f9fa;
    }

    .card {
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
  </style>
</head>

<body>
  <!-- <div class="container mt-5"> -->
  <div class="container" style="min-height: 100vh; display: flex; justify-content: center; align-items: center;">
    <div class="row">
      <h1 class="text-center mb-4">Sequelize CLI GUI</h1>

      <div class="row">
        <div class="col-md-4">
          <div class="card">
            <div class="card-header">
              Commands
            </div>
            <div class="card-body">
              <div class="accordion" id="commandsAccordion">
                <div class="accordion-item">
                  <h2 class="accordion-header">
                    <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseDb">
                      Database
                    </button>
                  </h2>
                  <div id="collapseDb" class="accordion-collapse collapse show" data-bs-parent="#commandsAccordion">
                    <div class="accordion-body">
                      <button class="btn btn-primary btn-sm mb-1 command-btn" data-description="Create a new migration file" data-command="db:migrate">db:migrate</button>
                      <button class="btn btn-primary btn-sm mb-1 command-btn" data-description="List the status of all migrations" data-command="db:migrate:status">db:migrate:status</button>
                      <button class="btn btn-primary btn-sm mb-1 command-btn" data-description="Undo the last migration" data-command="db:migrate:undo">db:migrate:undo</button>
                      <button class="btn btn-primary btn-sm mb-1 command-btn" data-description="Undo all migrations" data-command="db:migrate:undo:all">db:migrate:undo:all</button>
                      <button class="btn btn-primary btn-sm mb-1 command-btn" data-description="Create the database" data-command="db:create">db:create</button>
                      <button class="btn btn-primary btn-sm mb-1 command-btn" data-description="Drop the database" data-command="db:drop">db:drop</button>
                    </div>
                  </div>
                </div>
                <div class="accordion-item">
                  <h2 class="accordion-header">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseSeed">
                      Seed
                    </button>
                  </h2>
                  <div id="collapseSeed" class="accordion-collapse collapse" data-bs-parent="#commandsAccordion">
                    <div class="accordion-body">
                      <button class="btn btn-primary btn-sm mb-1 command-btn" data-description="Run specific seed file" data-command="db:seed">db:seed</button>
                      <button class="btn btn-primary btn-sm mb-1 command-btn" data-description="Run all seed files" data-command="db:seed:all">db:seed:all</button>
                      <button class="btn btn-primary btn-sm mb-1 command-btn" data-description="Undo specific seed file" data-command="db:seed:undo">db:seed:undo</button>
                      <button class="btn btn-primary btn-sm mb-1 command-btn" data-description="Undo all seed files" data-command="db:seed:undo:all">db:seed:undo:all</button>
                    </div>
                  </div>
                </div>
                <div class="accordion-item">
                  <h2 class="accordion-header">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseInit">
                      Init
                    </button>
                  </h2>
                  <div id="collapseInit" class="accordion-collapse collapse" data-bs-parent="#commandsAccordion">
                    <div class="accordion-body">
                      <button class="btn btn-primary btn-sm mb-1 command-btn" data-description="Initialize Sequelize" data-command="init">init</button>
                      <button class="btn btn-primary btn-sm mb-1 command-btn" data-description="Initialize configuration" data-command="init:config">init:config</button>
                      <button class="btn btn-primary btn-sm mb-1 command-btn" data-description="Initialize migrations" data-command="init:migrations">init:migrations</button>
                      <button class="btn btn-primary btn-sm mb-1 command-btn" data-description="Initialize models" data-command="init:models">init:models</button>
                      <button class="btn btn-primary btn-sm mb-1 command-btn" data-description="Initialize seeders" data-command="init:seeders">init:seeders</button>
                    </div>
                  </div>
                </div>
                <div class="accordion-item">
                  <h2 class="accordion-header">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseMigration">
                      Migration
                    </button>
                  </h2>
                  <div id="collapseMigration" class="accordion-collapse collapse" data-bs-parent="#commandsAccordion">
                    <div class="accordion-body">
                      <button class="btn btn-primary btn-sm mb-1 command-btn" data-description="Generate a new migration" data-command="migration:generate">migration:generate</button>
                      <button class="btn btn-primary btn-sm mb-1 command-btn" data-description="Create a new migration" data-command="migration:create">migration:create</button>
                    </div>
                  </div>
                </div>
                <div class="accordion-item">
                  <h2 class="accordion-header">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseModel">
                      Model
                    </button>
                  </h2>
                  <div id="collapseModel" class="accordion-collapse collapse" data-bs-parent="#commandsAccordion">
                    <div class="accordion-body">
                      <button class="btn btn-primary btn-sm mb-1 command-btn" data-description="Generate a new model" data-command="model:generate">model:generate</button>
                      <button class="btn btn-primary btn-sm mb-1 command-btn" data-description="Create a new model" data-command="model:create">model:create</button>
                    </div>
                  </div>
                </div>
                <div class="accordion-item">
                  <h2 class="accordion-header">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseSeedCreate">
                      Seed Create
                    </button>
                  </h2>
                  <div id="collapseSeedCreate" class="accordion-collapse collapse" data-bs-parent="#commandsAccordion">
                    <div class="accordion-body">
                      <button class="btn btn-primary btn-sm mb-1 command-btn" data-description="Generate a new seed file" data-command="seed:generate">seed:generate</button>
                      <button class="btn btn-primary btn-sm mb-1 command-btn" data-description="Create a new seed file" data-command="seed:create">seed:create</button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="col-md-8">
          <div class="card">
            <div class="card-header">
              Options
            </div>
            <div class="card-body">
              <div class="mb-2">
                <label for="custom-command" class="form-label">Custom Command:</label>
                <input type="text" class="form-control" id="custom-command" placeholder="Enter custom command">
              </div>
              <!-- Description -->
              <p id="command-description" class="text-muted text-warning"></p>
              <div class="mb-3" id="file-select-container" style="display: none;">
                <label for="file-select" class="form-label">Select File:</label>
                <select class="form-select" id="file-select">
                  <!-- File options will be loaded here -->
                </select>
              </div>
              <!-- Execute button -->
              <button class="btn btn-success" id="execute-btn">Execute</button>
            </div>
          </div>
          <div class="card mt-3">
            <div class="card-header">
              Output
            </div>
            <div id="output-container" class="card-body alert mb-0" style="border-top-left-radius: 0; border-top-right-radius: 0;">
              <pre id="output" class="mb-0"></pre>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const commandButtons = document.querySelectorAll('.command-btn');
      const fileSelectContainer = document.getElementById('file-select-container');
      const fileSelect = document.getElementById('file-select');
      const customCommandInput = document.getElementById('custom-command');
      const executeButton = document.getElementById('execute-btn');
      const outputArea = document.getElementById('output');
      const outputContainer = document.getElementById('output-container');
      const commandDescription = document.getElementById('command-description');

      let selectedCommand = '';

      commandButtons.forEach(button => {
        button.addEventListener('click', () => {
          selectedCommand = button.dataset.command;
          fileSelectContainer.style.display = 'none';
          fileSelect.innerHTML = '';
          customCommandInput.value = '';
          commandDescription.textContent = button.dataset.description;

          if (selectedCommand === 'db:migrate:undo' || selectedCommand === 'db:seed:undo') {
            // Load migration files
            loadFileOptions('migrations');
          } else if (selectedCommand === 'db:seed') {
            loadFileOptions('seeders');
          } else if (selectedCommand === 'db:migrate') {
            loadFileOptions('migrations');
          }

          customCommandInput.value = selectedCommand;
        });
      });

      customCommandInput.addEventListener('input', () => {
        selectedCommand = customCommandInput.value;
        fileSelectContainer.style.display = 'none';
        fileSelect.innerHTML = '';
        commandDescription.textContent = '';
      });

      function loadFileOptions(type) {
        fetch(`/api/files/${type}`)
          .then(response => response.json())
          .then(files => {
            fileSelectContainer.style.display = 'block';
            files.forEach(file => {
              const option = document.createElement('option');
              option.value = file;
              option.text = file;
              fileSelect.appendChild(option);
            });
          })
          .catch(error => {
            console.error('Error loading files:', error);
            outputArea.textContent = `Error loading files: ${error.message}`;
          });
      }

      executeButton.addEventListener('click', () => {
        executeButton.disabled = true;
        // add loading spinner
        executeButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Loading...';

        const selectedFile = fileSelect.value;
        const customCommand = customCommandInput.value;

        const requestBody = {
          command: selectedCommand,
          selectedFile: selectedFile,
          customCommand: customCommand
        }

        console.log(requestBody);
        fetch('/api/execute', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestBody)
          })
          .then(response => response.json())
          .then(result => {
            outputArea.textContent = '';
            if (result.error) {
              outputContainer.classList.remove('alert-success');
              outputContainer.classList.add('alert-danger');

              outputArea.textContent += `Error: ${result.error}\n`;

              if (result.stderr) {
                outputArea.textContent += `${result.stderr}\n`;
              }
            } else {
              outputContainer.classList.remove('alert-danger');
              outputContainer.classList.add('alert-success');
              if (selectedCommand == 'db:migrate:status') {
                // replace "up" and "down" with icons 
                result.stdout = result.stdout.replace(/up/g, '<i class="bi bi-arrow-up-circle-fill text-success"></i> up');
                result.stdout = result.stdout.replace(/down/g, '<i class="bi bi-arrow-down-circle-fill text-danger"></i> down');
              }
              outputArea.innerHTML = `${result.stdout}\n`;
            }
          })
          .catch(error => {
            console.error('Error executing command:', error);
            outputArea.textContent = `Error executing command: ${error.message}`;
          })
          .finally(() => {
            executeButton.disabled = false;
            executeButton.innerHTML = 'Execute';
          });
      });
    });
  </script>
</body>

</html>